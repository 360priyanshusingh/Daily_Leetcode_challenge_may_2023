#include<bits/stdc++.h>
class Solution {
public:
    vector<pair<int,int>> first,second;

    void dfs(int i,int j,vector<vector<int>>& grid,int coutn){
        if(i<0 || j<0 || i>=grid.size() || j>=grid[0].size() || grid[i][j]!=1) {
            return ;
        }
        grid[i][j]=coutn;

        if(coutn==2)first.push_back({i,j});
        else second.push_back({i,j}); 
        
          dfs(i,j+1,grid,coutn);
          dfs(i,j-1,grid,coutn);
          dfs(i-1,j,grid,coutn);
          dfs(i+1,j,grid,coutn);
        

    }
    int shortestBridge(vector<vector<int>>& grid){
        int coutn=2;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]==1){
                    dfs(i,j,grid,coutn);
                    coutn++;
                }
            }
        }

        int ans=INT_MAX;
        for(int i=0;i<first.size();i++){
            for(int j=0;j<second.size();j++){
            ans=min(ans,(abs(first[i].first-second[j].first) + abs(first[i].second-second[j].second)));
            }
        }

        return ans-1;
    }
};