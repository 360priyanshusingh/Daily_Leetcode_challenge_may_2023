class Solution {
public
   double dfs(string scr,string &des,  unordered_setstring &visited,unordered_mapstring,unordered_mapstring,double&mp){
           
           if(mp[scr].find(des)!=mp[scr].end()){
               return mp[scr][des];
           }
           for(auto nodemp[scr]){
               if(visited.find(node.first)==visited.end()){
                   visited.insert(node.first);
                 double val=dfs(node.first,des,visited,mp);
                  if(val){
                     mp[scr][des]=node.secondval;
                     return mp[scr][des] ;
                  }
               }
           }

           return 0;
     

  }
vectordouble calcEquation(vectorvectorstring& equations, vectordouble& values,                       vectorvectorstring& queries) {
         int n=equations.size();
        unordered_mapstring,unordered_mapstring,double mp;
        for(int i=0;in;i++){
            mp[equations[i][0]][equations[i][1]]=values[i];
            mp[equations[i][1]][equations[i][0]]=1values[i];
        }
       vectordouble ans;
       for(int i=0;iqueries.size();i++){
           unordered_setstring visited;
           double val=dfs(queries[i][0],queries[i][1],visited,mp);
           if(!val){
               ans.push_back(-1.0);
           }
           else{
               ans.push_back(val);
           }
           
       }

       return ans;
        
    }
};