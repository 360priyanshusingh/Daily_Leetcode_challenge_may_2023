class Solution {
public:
    // int dfs(vector<vector<int>>& grid,int i,int j,int n){
    //     if(i==n-1 && j==n-1) return 1;
    //     if(i<0 || j<0|| i>=n || j>=n || grid[i][j]!=0) return 1000;
        
    //     int s=grid[i][j];
    //      grid[i][j]=2;

    //      int ans1=dfs(grid,i,j+1,n);
    //      int ans2=dfs(grid,i,j-1,n);
    //      int ans3=dfs(grid,i+1,j,n);
    //      int ans4=dfs(grid,i-1,j,n);
    //      int ans5=dfs(grid,i+1,j+1,n);
    //      int ans6=dfs(grid,i+1,j-1,n);
    //      int ans7=dfs(grid,i-1,j+1,n);
    //      int ans8=dfs(grid,i-1,j-1,n);
    //      grid[i][j]=s;
    //  return 1+ min({ans1,ans2,ans3,ans4,ans5,ans6,ans7,ans8});

    // }
     vector<pair<int,int>> direction = {{0,1}, {0,-1}, {1,0}, {-1,0}, {1,1}, {-1,-1}, {1,-1}, {-1,1}};
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();

        if(grid[0][0]==1 || grid[n-1][n-1]==1) return -1;
        grid[0][0]=1;
        queue<pair<int,int>> pq;
        pq.push({0,0});
        while(!pq.empty()){
            
            auto [x,y]=pq.front();
            pq.pop();

            if(x==n-1 && y==n-1) return grid[x][y];
            for(auto [nx,ny]:direction ){

                int ax=nx+x;
                int ay=ny+y;

                if(ax>=0 && ax<=n-1 && ay>=0 && ay<=n-1 && grid[ax][ay]==0){
                    grid[ax][ay]=grid[x][y]+1;
                    pq.push({ax,ay});
                }
            }
        }
        
        return -1;
        
    }
};